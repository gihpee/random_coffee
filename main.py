import telebot
from telebot import types
from telebot.apihelper import ApiTelegramException
import psycopg2
import time

bot = telebot.TeleBot('TOKEN')

conn = psycopg2.connect(host='host', user='user', password='pwd', database='db')
cur = conn.cursor()
cur.execute("""CREATE TABLE IF NOT EXISTS users_demo(
    userid BIGINT PRIMARY KEY,
    closed_club BOOLEAN,
    username VARCHAR,
    name VARCHAR,
    activity VARCHAR, 
    social_media VARCHAR,
    interests VARCHAR,
    this_week VARCHAR, 
    dates VARCHAR,
    finished BOOLEAN,
    format VARCHAR
)""")
conn.commit()


@bot.message_handler(commands=['start'])
def start(message):
    try:
        bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
        cur.execute(f'SELECT * FROM users_demo WHERE userid={message.from_user.id}')
        info = cur.fetchone()
        print(message.chat.id)

        if info is None:
            kb = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—ã–π –ö–ª—É–±', callback_data='closed')
            btn2 = types.InlineKeyboardButton('–î—Ä—É–∑—å—è –ö–ª—É–±–∞', callback_data='friend')
            kb.add(btn1)
            kb.add(btn2)

            cur.execute(f"INSERT INTO users_demo VALUES('{message.from_user.id}', {False}, '{message.from_user.username}',"
                        f" '{0}', '{0}', '{0}', '{0}', '{0}', '{0}', '{False}', '{0}')")
            conn.commit()
            bot.send_photo(message.chat.id, open('–ø–∞–º—è—Ç–∫–∞.png', 'rb'), '–ü—Ä–∏–≤–µ—Ç!üëã\n\n–Ø Random Coffee –±–æ—Ç –ë–∏–∑–Ω–µ—Å-–∫–ª—É–±–∞'
                                                                       ' –í–®–≠!\n\n–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —è'
                                              ' –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–µ–±–µ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —Å–ª—É—á–∞–π–Ω–æ'
                                              ' –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –ö–ª—É–±–∞.\n\n'
                                              '–í—ã–±–µ—Ä–∏, –∫ –∫–∞–∫–æ–π —á–∞—Å—Ç–∏ –ö–ª—É–±–∞ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è:', reply_markup=kb)

        else:
            if not info[9]:
                kb = types.InlineKeyboardMarkup()
                btn1 = types.InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—ã–π –ö–ª—É–±', callback_data='closed')
                btn2 = types.InlineKeyboardButton('–î—Ä—É–∑—å—è –ö–ª—É–±–∞', callback_data='friend')
                kb.add(btn1)
                kb.add(btn2)

                cur.execute(f"""UPDATE users_demo SET closed_club={False}, username='{message.from_user.username}', name='{0}', activity='{0}', 
                social_media='{0}', interests='{0}', this_week='{0}', dates='{0}', finished='{False}', format='{0}' 
                WHERE userid={message.chat.id}""")
                conn.commit()
                bot.send_photo(message.chat.id, open('–ø–∞–º—è—Ç–∫–∞.png', 'rb'),
                               '–ü—Ä–∏–≤–µ—Ç!üëã\n\n–Ø Random Coffee –±–æ—Ç –ë–∏–∑–Ω–µ—Å-–∫–ª—É–±–∞'
                               ' –í–®–≠!\n\n–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —è'
                               ' –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–µ–±–µ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —Å–ª—É—á–∞–π–Ω–æ'
                               ' –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –ö–ª—É–±–∞.\n\n'
                               '–í—ã–±–µ—Ä–∏, –∫ –∫–∞–∫–æ–π —á–∞—Å—Ç–∏ –ö–ª—É–±–∞ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è:', reply_markup=kb)
            else:
                ask_remake(message)

    except ApiTelegramException:
        pass


@bot.message_handler(commands=['restart'])
def ask_remake(message):
    bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    kb = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–î–∞', callback_data='yes_remake')
    kb.add(btn1)
    bot.send_message(message.chat.id, '–•–æ—á–µ—à—å –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?', reply_markup=kb)


@bot.callback_query_handler(func=lambda call: call.data == 'yes_remake')
def remake(call: types.CallbackQuery):
    bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
    name(call.message)


@bot.message_handler(commands=['help'])
def help_bk(message):
    bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn1 = types.KeyboardButton(text='–ü–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è')
    btn2 = types.KeyboardButton(text='–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—á–∞—Å—Ç–∏–µ')
    kb.add(btn1)
    kb.add(btn2)

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ–ø—Ü–∏—é –Ω–∏–∂–µ.\n–ï—Å–ª–∏ —É —Ç–µ–±—è –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–æ–∂–Ω–µ–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ'
                                      ' –≤ –æ—Ç–≤–µ—Ç, –∏ (–º–æ–∂–µ—Ç –∏ –Ω–µ —Å—Ä–∞–∑—É, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ HSE BC Random Coffee'
                                      ' —É–≤–∏–¥–∏—Ç –µ–≥–æ –∏ –æ—Ç–≤–µ—Ç–∏—Ç —Ç–µ–±–µ.\n\n–ß—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ –º–µ–Ω—é, —Ç—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç'
                                      ' –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ /help', reply_markup=kb)
    bot.register_next_step_handler(message, help_raspr)


def help_raspr(message):
    if message.text == '–ü–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è':
        kb = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–°–≤–æ—ë –∏–º—è', callback_data='name')
        btn2 = types.InlineKeyboardButton('–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ—Ü. —Å–µ—Ç—å', callback_data='social')
        btn3 = types.InlineKeyboardButton('–ö–µ–º —Ä–∞–±–æ—Ç–∞—é', callback_data='work')
        btn4 = types.InlineKeyboardButton('–û —Å–µ–±–µ', callback_data='about')
        btn5 = types.InlineKeyboardButton('–§–æ—Ä–º–∞—Ç', callback_data='form')
        kb.add(btn1)
        kb.add(btn2)
        kb.add(btn3)
        kb.add(btn4)
        kb.add(btn5)

        bot.send_message(message.chat.id, '–û–∫, –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å', reply_markup=kb)

    elif message.text == '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—á–∞—Å—Ç–∏–µ':

        kb = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–ü–∞—É–∑–∞ –Ω–∞ –º–µ—Å—è—Üüö´', callback_data='miss_month')
        btn2 = types.InlineKeyboardButton('–ë–µ—Å—Å—Ä–æ—á–Ω–æ', callback_data='inf')
        btn3 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back1')
        kb.add(btn1)
        kb.add(btn2)
        kb.add(btn3)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á–∏.\n\n–ü—Ä–∏ –ª—é–±–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –±–æ—Ç –Ω–∞ —ç—Ç–æ'
                                          ' –≤—Ä–µ–º—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=kb)

    else:
        bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ! –û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω')


@bot.callback_query_handler(func=lambda call: call.data == 'back1')
def change(call: types.CallbackQuery):
    bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
    help_bk(call.message)


@bot.callback_query_handler(func=lambda call: call.data in ['name', 'social', 'work', 'about', 'form'])
def change(call: types.CallbackQuery):
    bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
    if call.data == 'name':
        bot.send_message(chat_id=call.message.chat.id, text='–ù–∞–ø–∏—à–∏ –Ω–∞ —á—Ç–æ —Ö–æ—á–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å')
        bot.register_next_step_handler(call.message, change_name)
    elif call.data == 'social':
        bot.send_message(chat_id=call.message.chat.id, text='–ù–∞–ø–∏—à–∏ –Ω–∞ —á—Ç–æ —Ö–æ—á–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å')
        bot.register_next_step_handler(call.message, change_social)
    elif call.data == 'work':
        bot.send_message(chat_id=call.message.chat.id, text='–ù–∞–ø–∏—à–∏ –Ω–∞ —á—Ç–æ —Ö–æ—á–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å')
        bot.register_next_step_handler(call.message, change_work)
    elif call.data == 'about':
        bot.send_message(chat_id=call.message.chat.id, text='–ù–∞–ø–∏—à–∏ –Ω–∞ —á—Ç–æ —Ö–æ—á–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å')
        bot.register_next_step_handler(call.message, change_about)
    elif call.data == 'form':
        kb = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–û–Ω–ª–∞–π–Ω', callback_data='change_online')
        btn2 = types.InlineKeyboardButton('–û—Ñ—Ñ–ª–∞–π–Ω', callback_data='change_offline')
        kb.add(btn1)
        kb.add(btn2)

        bot.send_message(call.message.chat.id, '–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç—ã –±—ã –ø—Ä–µ–¥–ø–æ—á—ë–ª –≤—Å—Ç—Ä–µ—á—É?', reply_markup=kb)


def change_name(message):
    cur.execute(f"""UPDATE users_demo SET name='{message.text}' WHERE userid={message.chat.id}""")
    conn.commit()
    bot.send_message(chat_id=message.chat.id, text="–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã!\n\n–í–æ—Ç —Ç–∞–∫ —Ç–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞‚è¨")
    show(message)


def change_social(message):
    cur.execute(f"""UPDATE users_demo SET social_media='{message.text}' WHERE userid={message.chat.id}""")
    conn.commit()
    bot.send_message(chat_id=message.chat.id, text="–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã!\n\n–í–æ—Ç —Ç–∞–∫ —Ç–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞‚è¨")
    show(message)


def change_work(message):
    cur.execute(f"""UPDATE users_demo SET activity='{message.text}' WHERE userid={message.chat.id}""")
    conn.commit()
    bot.send_message(chat_id=message.chat.id, text="–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã!\n\n–í–æ—Ç —Ç–∞–∫ —Ç–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞‚è¨")
    show(message)


def change_about(message):
    cur.execute(f"""UPDATE users_demo SET interests='{message.text}' WHERE userid={message.chat.id}""")
    conn.commit()
    bot.send_message(chat_id=message.chat.id, text="–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã!\n\n–í–æ—Ç —Ç–∞–∫ —Ç–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞‚è¨")
    show(message)


@bot.callback_query_handler(func=lambda call: call.data in ['change_online', 'change_offline'])
def change_form(call: types.CallbackQuery):
    bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
    if call.data == 'change_online':
        cur.execute(f"""UPDATE users_demo SET format='online' WHERE userid={call.message.chat.id}""")
        conn.commit()
    else:
        cur.execute(f"""UPDATE users_demo SET format='offline' WHERE userid={call.message.chat.id}""")
        conn.commit()

    kb = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back1')
    btn2 = types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É', callback_data='sshow')
    kb.add(btn2)
    kb.add(btn1)

    bot.send_message(chat_id=call.message.chat.id, text="–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã!", reply_markup=kb)


@bot.callback_query_handler(func=lambda call: call.data in ["closed", "friend"])
def closed(call: types.CallbackQuery):
    bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
    if call.data == 'closed':
        bot.send_message(chat_id=call.message.chat.id, text="–≠—Ç–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –∑–∞—â–∏—â–µ–Ω–æ –ø–∞—Ä–æ–ª–µ–º üîê, –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –Ω—É–∂–µ–Ω"
                                                            " <b>—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥</b>", parse_mode='HTML')
        bot.register_next_step_handler(call.message, check_secret_code_closed)
    elif call.data == 'friend':
        bot.send_message(chat_id=call.message.chat.id, text="–≠—Ç–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –∑–∞—â–∏—â–µ–Ω–æ –ø–∞—Ä–æ–ª–µ–º üîê, –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –Ω—É–∂–µ–Ω"
                                                            " <b>—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥</b>", parse_mode='HTML')
        bot.register_next_step_handler(call.message, check_secret_code_friend)


def check_secret_code_closed(message):
    if message.text == '1111':
        cur.execute(f"""UPDATE users_demo SET closed_club={True} WHERE userid={message.chat.id}""")
        conn.commit()

        bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ!')
        name(message)
    else:
        kb = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
        kb.add(btn1)
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∑–∞–Ω–æ–≤–æ!', reply_markup=kb)
        bot.register_next_step_handler(message, check_secret_code_closed) #&&&&&


def check_secret_code_friend(message):
    if message.text == '1111':
        cur.execute(f"""UPDATE users_demo SET closed_club={False} WHERE userid={message.chat.id}""")
        conn.commit()

        bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ!')
        name(message)
    else:
        kb = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
        kb.add(btn1)
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∑–∞–Ω–æ–≤–æ!', reply_markup=kb)
        bot.register_next_step_handler(message, check_secret_code_closed) #&&&&&


@bot.callback_query_handler(func=lambda call: call.data == "back")
def back(call: types.CallbackQuery):
    bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
    kb = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—ã–π –ö–ª—É–±', callback_data='closed')
    btn2 = types.InlineKeyboardButton('–î—Ä—É–∑—å—è –ö–ª—É–±–∞', callback_data='friend')
    kb.add(btn1)
    kb.add(btn2)

    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏, –∫ –∫–∞–∫–æ–π —á–∞—Å—Ç–∏ –ö–ª—É–±–∞ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è:', reply_markup=kb)


def name(message):
    bot.send_message(message.chat.id, '‚òïÔ∏è –ù–∞–ø–∏—à–∏ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é')
    bot.register_next_step_handler(message, save_name_and_turn_to_social_media)


def save_name_and_turn_to_social_media(message):
    cur.execute(f"""UPDATE users_demo SET name='{message.text}' WHERE userid={message.chat.id}""")
    conn.commit()

    bot.send_message(message.chat.id, 'ü§≥ –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –ª—é–±–æ–π —Å–æ—Ü. —Å–µ—Ç–∏, –≥–¥–µ –µ—Å—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è'
                                      ' –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ\n\n–¢–∞–∫ –≤—ã –≤ –ø–∞—Ä–µ —Å–º–æ–∂–µ—Ç–µ –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –¥—Ä—É–≥ –æ –¥—Ä—É–≥–µ –¥–æ –≤—Å—Ç—Ä–µ—á–∏')
    bot.register_next_step_handler(message, save_social_media_and_turn_to_activity)


def save_social_media_and_turn_to_activity(message):
    cur.execute(f"""UPDATE users_demo SET social_media='{message.text}' WHERE userid={message.chat.id}""")
    conn.commit()

    bot.send_message(message.chat.id, 'üë®‚Äçüî¨ –ö–µ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –∏ —á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?')
    bot.register_next_step_handler(message, save_activity_abd_turn_to_interests)


def save_activity_abd_turn_to_interests(message):
    cur.execute(f"""UPDATE users_demo SET activity='{message.text}' WHERE userid={message.chat.id}""")
    conn.commit()

    bot.send_message(message.chat.id, 'üëÄ –ö–∞–∫–∏–µ —É —Ç–µ–±—è –µ—Å—Ç—å —Ä–∞–±–æ—á–∏–µ –∏ –Ω–µ—Ä–∞–±–æ—á–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã?\n\nüí° –ù–∞–ø–∏—à–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
                                      ' —Å–ª–æ–≤–∞, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞—Ü–µ–ø–∏—Ç—å—Å—è –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∏–∑ —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä!'
                                      ' –ù–∞–ø—Ä–∏–º–µ—Ä, —É–≤–ª–µ—á–µ–Ω–∏—è, –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥, –ª—é–±–∏–º—ã–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞')
    bot.register_next_step_handler(message, save_interests_abd_turn_to_format)


def save_interests_abd_turn_to_format(message):
    cur.execute(f"""UPDATE users_demo SET interests='{message.text}' WHERE userid={message.from_user.id}""")
    conn.commit()

    kb = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–û–Ω–ª–∞–π–Ω', callback_data='online')
    btn2 = types.InlineKeyboardButton('–û—Ñ—Ñ–ª–∞–π–Ω', callback_data='offline')
    kb.add(btn1)
    kb.add(btn2)

    bot.send_message(message.chat.id, '–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç—ã –±—ã –ø—Ä–µ–¥–ø–æ—á—ë–ª –≤—Å—Ç—Ä–µ—á—É?', reply_markup=kb)


@bot.callback_query_handler(func=lambda call: call.data in ['online', 'offline'])
def save(call: types.CallbackQuery):
    bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
    if call.data == 'online':
        cur.execute(f"""UPDATE users_demo SET format='online' WHERE userid={call.message.chat.id}""")
        conn.commit()
    elif call.data == 'offline':
        cur.execute(f"""UPDATE users_demo SET format='offline' WHERE userid={call.message.chat.id}""")
        conn.commit()
    cur.execute(f"""UPDATE users_demo SET finished={True} WHERE userid={call.message.chat.id}""")
    bot.send_message(chat_id=call.message.chat.id, text="–ü–æ–ª—É—á–∏–ª–æ—Å—å! üôå\n\n–¢–µ–ø–µ—Ä—å —Ç—ã ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫ –≤—Å—Ç—Ä–µ—á HSE BC"
                                                        " Random Coffee ‚òïÔ∏è\n\n–í–æ—Ç —Ç–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
                                                        " –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –ø—Ä–∏—à–ª–µ–º —Ç–≤–æ–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É:\n\n‚è¨")
    show(call.message)


@bot.message_handler(commands=['show'])
def show(message):
    bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    cur.execute(f'SELECT * FROM users_demo WHERE userid={message.chat.id}')
    info = cur.fetchone()
    #print(message.from_user.id)

    bot.send_message(chat_id=message.chat.id, text=f"{info[3]}\n–ü—Ä–æ—Ñ–∏–ª—å: {info[5]}\n\n‚óΩ –ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è:"
                                                   f" {info[4]}\n‚óΩ –ó–∞—Ü–µ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {info[6]}\n\n–ï—Å–ª–∏"
                                                   f" –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å - /help")


@bot.callback_query_handler(func=lambda call: call.data == "sshow")
def sshow(call: types.CallbackQuery):
    bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
    cur.execute(f'SELECT * FROM users_demo WHERE userid={call.message.chat.id}')
    info = cur.fetchone()
    # print(message.from_user.id)
    print(info)

    bot.send_message(chat_id=call.message.chat.id, text=f"{info[3]}\n–ü—Ä–æ—Ñ–∏–ª—å: {info[5]}\n\n‚óΩ –ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è:"
                                                   f" {info[4]}\n‚óΩ –ó–∞—Ü–µ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {info[6]}\n\n–ï—Å–ª–∏"
                                                   f" –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å - /help")


@bot.callback_query_handler(func=lambda call: call.data == "participate")
def participate(call: types.CallbackQuery):
    bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
    cur.execute(f"""UPDATE users_demo SET this_week='yes' WHERE userid={call.message.chat.id}""")
    conn.commit()
    bot.send_message(chat_id=call.message.chat.id, text="–£—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")


@bot.callback_query_handler(func=lambda call: call.data == "miss")
def miss(call: types.CallbackQuery):
    bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
    cur.execute(f"""UPDATE users_demo SET this_week='no' WHERE userid={call.message.chat.id}""")
    conn.commit()
    bot.send_message(chat_id=call.message.chat.id, text="–ë—É–¥–µ–º –∂–¥–∞—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ!")


@bot.callback_query_handler(func=lambda call: call.data == "miss_month")
def miss_month(call: types.CallbackQuery):
    bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
    cur.execute(f"""UPDATE users_demo SET this_week='month' WHERE userid={call.message.chat.id}""")
    conn.commit()
    bot.send_message(chat_id=call.message.chat.id, text="–í—Å—Ç—Ä–µ—Ç–∏–º—Å—è —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü!")


@bot.callback_query_handler(func=lambda call: call.data == "inf")
def miss_inf(call: types.CallbackQuery):
    bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
    cur.execute(f"""UPDATE users_demo SET this_week='inf' WHERE userid={call.message.chat.id}""")
    conn.commit()
    bot.send_message(chat_id=call.message.chat.id, text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")


while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(e)
        time.sleep(5)